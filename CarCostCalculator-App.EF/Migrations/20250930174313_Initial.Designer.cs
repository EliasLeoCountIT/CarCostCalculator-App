// <auto-generated />
using System;
using CarCostCalculator_App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarCostCalculator_App.EF.Migrations
{
    [DbContext(typeof(CarCostCalculatorContext))]
    [Migration("20250930174313_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.AnnualData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AnnualDatas");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.CostEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthlyDataId");

                    b.ToTable("CostEntries");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.KilometerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Kilometers")
                        .HasColumnType("float");

                    b.Property<int>("MonthlyDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyDataId");

                    b.ToTable("KilometerEntries");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.MonthlyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnualDataId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnualDataId");

                    b.ToTable("MonthlyDatas");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.CostEntry", b =>
                {
                    b.HasOne("CarCostCalculator_App.EF.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarCostCalculator_App.EF.Entities.MonthlyData", "MonthlyData")
                        .WithMany("CostEntries")
                        .HasForeignKey("MonthlyDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MonthlyData");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.KilometerEntry", b =>
                {
                    b.HasOne("CarCostCalculator_App.EF.Entities.MonthlyData", "MonthlyData")
                        .WithMany("KilometerEntries")
                        .HasForeignKey("MonthlyDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyData");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.MonthlyData", b =>
                {
                    b.HasOne("CarCostCalculator_App.EF.Entities.AnnualData", "AnnualData")
                        .WithMany("MonthlyData")
                        .HasForeignKey("AnnualDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnualData");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.AnnualData", b =>
                {
                    b.Navigation("MonthlyData");
                });

            modelBuilder.Entity("CarCostCalculator_App.EF.Entities.MonthlyData", b =>
                {
                    b.Navigation("CostEntries");

                    b.Navigation("KilometerEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
